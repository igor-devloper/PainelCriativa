generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Request {
  id                          String           @id @default(cuid())
  name                        String
  description                 String
  amount                      Decimal          @db.Decimal(10, 2)
  currentBalance              Decimal          @db.Decimal(10, 2)
  initialUserBalance          Decimal          @db.Decimal(10, 2)
  balanceDeducted             Decimal          @db.Decimal(10, 2)
  status                      RequestStatus    @default(WAITING)
  userId                      String
  phoneNumber                 String
  financeId                   String?
  expectedDate                DateTime?
  denialReason                String?
  proofUrl                    String?
  accountingBlock             AccountingBlock?
  createdAt                   DateTime         @default(now())
  updatedAt                   DateTime         @updatedAt
  responsibleCompany          String
  whatsappMessageId           String?
  whatsappMessageStatus       String?
  whatsappMessageError        String?
  gestor                      String?
  responsibleValidationUserID String?
}

model AccountingBlock {
  id             String      @id @default(cuid())
  code           String      @unique
  requestId      String      @unique
  request        Request     @relation(fields: [requestId], references: [id])
  status         BlockStatus @default(OPEN)
  initialAmount  Decimal     @db.Decimal(10, 2)
  currentBalance Decimal     @db.Decimal(10, 2)
  expenses       Expense[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  company        String
}

model Expense {
  id            String          @id @default(uuid())
  name          String
  description   String?
  amount        Decimal         @db.Decimal(10, 2)
  category      ExpenseCategory
  paymentMethod PaymentMethod
  blockId       String
  block         AccountingBlock @relation(fields: [blockId], references: [id])
  date          DateTime
  status        ExpenseStatus   @default(WAITING)
  userId        String // ID do usu√°rio Clerk que criou
  imageUrls     String[] // URLs dos comprovantes
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  company       String
}

model UserBalance {
  id      String  @id @default(cuid())
  userId  String
  balance Decimal @default(0) @db.Decimal(10, 2)
  company String
}

enum RequestStatus {
  WAITING
  VALIDATES
  AUTHORIZES
  ACCEPTS
  COMPLETED
}

enum BlockStatus {
  OPEN
  CLOSED
  APPROVED
  DENIED
}

enum ExpenseStatus {
  WAITING
  APPROVED
  DENIED
}

enum ExpenseCategory {
  FOODANDBEVERAGE
  ACCOMMODATION
  TOLL
  FREIGHT
  POSTAGE
  PRINTING
  FUEL
  VEHICLERENTAL
  TICKET
  AIRTICKET
  BUSTICKET
  VEHICLEWASH
  ADVANCE
  SUPPLIES
  OTHER
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  BANK_SLIP
  CASH
  PIX
  OTHER
}
