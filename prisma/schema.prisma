generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model Team {
  id           String          @id @default(cuid())
  name         String
  adminId      String          // ID do usuário Clerk que é o administrador
  members      TeamMember[]
  blocks       Block[]
  transactions Transaction[]
  invitations  TeamInvitation[]
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
}

model TeamMember {
  id        String   @id @default(cuid())
  userId    String   // ID do usuário Clerk
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, teamId])
}

model TeamInvitation {
  id        String   @id @default(cuid())
  email     String
  teamId    String
  token     String   @unique
  expiresAt DateTime
  team      Team     @relation(fields: [teamId], references: [id])

  @@unique([email, teamId])
}

model Block {
  id           String        @id @default(cuid())
  name         String
  amount       Float
  status       BlockStatus   // Pode ser "OPEN", "CLOSED", "APPROVED", etc.
  teamId       String
  team         Team          @relation(fields: [teamId], references: [id])
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Transaction {
  id            String                   @id @default(uuid())
  name          String
  description   String?
  type          TransactionType
  status        TransactionStatus?       @default(WAITING)     
  amount        Decimal                  @db.Decimal(10, 2)
  category      TransactionCategory
  paymentMethod TransactionPaymentMethod
  blockId       String   
  block         Block                    @relation(fields: [blockId], references: [id])
  teamId        String  
  team          Team                     @relation(fields: [teamId], references: [id])
  date          DateTime
  createdAt     DateTime                 @default(now())
  updatedAt     DateTime                 @updatedAt
  userId        String
  imageUrl      String[]                 // Adiciona o campo para a URL da imagem
}

enum TransactionType {
  DEPOSIT
  EXPENSE
  REFUND
} 

enum TransactionStatus {
  WAITING
  FINISHED
} 

enum BlockStatus {
  OPEN
  CLOSED
  APPROVED
} 

enum TransactionCategory {
  FOOD
  UTILITY
  OTHER
  GASOLINE
  ADVANCE 
}

enum TransactionPaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  BANK_SLIP
  CASH
  PIX
  OTHER
}